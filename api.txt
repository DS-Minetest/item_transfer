Nodes that want to transfer items between themselves and other nodes should use this api.
In this file nodes of this sort will be called item transfer nodes.

Item transfering nodes differ from other nodes by their node definition.


Groups
------

All item transfering nodes should have the group `item_transfering = 1`.


Callbacks
---------

Item transfering nodes should also have some callbacks defined in a table in their node definition.
This table should be named `"_item_transfer"`, so that `node_def._item_transfer` is it.
These callbacks should be called by other item transfering nodes. They should get them via `item_transfer.get_callbacks(node_name)` (see Helpers).
All these seven callbacks are obligatory.

In your node definition, it should look like this:
_item_transfer = {
	can_connect = function(pos, node, other_pos, custom),
	connect = function(pos, node, other_pos, inward, outward, custom),
	is_connected = function(pos, node, other_pos, others_in, others_out, custom),
	can_insert = function(pos, node, other_pos, item, item_properties, custom),
	insert = function(pos, node, other_pos, item, item_properties, custom),
	can_take = function(pos, node, other_pos, wanted_item, amount, exact, custom),
	take = function(pos, node, other_pos, wanted_item, amount, exact, custom),
}

All these callbacks are documented below:

format:
<callback_name>(<parameters>)
- caller: <basic information for the caller>
- called: <basic information for the called one>
- parameters: <parameters>
- return: <return value(s)>
- <extra/special information>

can_connect(pos, node, other_pos[, custom])
- caller: use this to check if the node wants to connect to you
- called: return information on whether a connection should be done
- parameters:
  * pos: the position of the node on which the callback is called
  * node: the node at pos
  * other_pos: the position of the node from which the callback is called
  * custom: see Custom
- return: (bool)in, (bool)out, (bool)connects_automatically
  * in: whether a connection is be allowed inward, (whether it will ever be allowed to send an itemstack to this node)
  * out: whether a connection is be allowed outward, (whether it will ever be allowed to take an itemstack out of this node or whether it will ever happen that an item comes out of this node)
  * connects_automatically: if a node that normally does not connect automatically connect uses can_connect and gets here a true value back, it should do connect(...)

connect(pos, node, other_pos, inward, outward[, custom])
- caller: use this callback to tell a node, that it should connect to you
- called: do in this callback a visual update or something
- parameters:
  * pos, node, other_pos, custom: same as above
  * inward: whether there should be a connection inward
  * outward: whether there should be a connection outward
- return: no return value is needed but the function has to exist
- if inward or outward is a false value, the corresponding connection should be cut
  when a node is dug, it should do connect(...) to all its connected nodes or to all node that could be connected

is_connected(pos, node, other_pos, others_in, others_out[, custom])
- caller: see whether called can confirm how you think how you are connected
- called: return the set connections
- parameters:
  * pos, node, other_pos, custom: same as above
  * others_in: whether the other node thinks that the return value in should be true
  * others_out: whether the other node thinks that the return value out should be true
- return: (bool)in, (bool)out
  * returns whether a connection is there inward (in) and whether theres one outward (out)
- others_in and others_out are for laziness. they should be returned if called does not save to where it is connected

can_insert(pos, node, other_pos, item[, item_properties, custom])
- caller: check whether an itemstack can be added
- called: caller wants to send you an item, return whether you have space
- parameters:
  * pos, node, other_pos, custom: same as above
  * item: an itemstack (a copy, not the original)
  * item_properties: see item_properties thing
- return: 3 return values:
  * 1: (bool) whether to accept the whole stack as it is
  * 2: (number) amount of items that are / would be accepted
  * 2: it should be a whole number between the stack size and 0
  * 2: if the first return value is true: the stack size is included, 0 is excluded and the default value is the stack size
    else: 0 is included, the stack size is excluded and the default value is 0
  * 3: (number) a priority, it ranges form -inf to inf, default shall be 0
  * 3: it is for the case that the inserter has many destinations to choose from
  * 3: nodes that do not only send the item directly further should have the value 100
- for examples see scenario 2 todo

insert(pos, node, other_pos, item[, item_properties, custom])
- caller: insert an item into called. assume that item is away
- called: take the item to you or drop it or something, but keep item conservation
- parameters:
  * pos, node, other_pos, item, item_properties, custom: same as above
- return: no return values
- its the nodes duty to make sure that no items get lost. ergo an empty function is inaceptable (if the node is not a trash can)

can_take(pos, node, other_pos[, wanted_item, amount, exact, custom])
- caller: see whether you can extract an amount of item
- called: return whether you can give that many items
- parameters:
  * pos, node, other_pos, custom: same as above
  * wanted_item: an itemstack, the item that the taker(=caller) wants to take
    wanted_item can be nil, which means that anything should be taken
    wanted_item should not have a greater size than 1
  * amount: the number of items that is wanted
    amount can be nil, this means that a whole stack is wanted
  * exact: a number describing how many exactness requirements are in custom. called has to cover all these or can not give the wanted item; default: 0
    exact can be ignored if wanted_item is nil
- return: maximally 2 return values:
  * 1: (bool) if wanted_item is given: whether the request can be fulfilled; else: whether anything can be taken out, second returnvalue is nil
  * 2: (number) amount that can be given
  * 2: if the first return value is a true value, its greater or equal to "amount"(parameter), else its less

take(pos, node, other_pos[, wanted_item, amount, exact, custom])
- caller: get some items
- called: give items away
- parameters:
  * pos, node, other_pos, wanted_item, amount, exact, custom: same as above
- return: returns an itemstack or nil
  * the itemstack should be the item that was wanted or any item if no wanted_item was specified
  * the count of the itemstack is less than or equal to amount
- the returned item has to be removed from the nodes inventory because of item conservation


Custom
------

todo todo todo ...
There is always a parameter called "custom".
this is optional
caller wants to give called more information, so it adds this
this is node-specific and should not be carried further

there are some default custom things that are commonly known and used for:

can_connect:
custom = {
    visited = {[<hashed_node_pos>] = <bool>, ...},
      -- if a node calls another node with the same callback, it has to carry this information further and has to add itself as true or stop if it is already visited
      -- this is to avoid cycling-loops
    ...
}

connect:
custom = {
    visited = {...},
      -- same as above
    ...
}

is_connected:
custom = {
    visited = {...},
      -- same as above
    ...
}

can_insert:
custom = {
    visited = {...},
      -- same as above
    destination = ?,
      -- "* custom might include wishes for the place where the item should go to (todo)"
    overflow = <bool>,
      -- true if the item that should be inserted came from pos but was too big to be inserted
    ...
}

insert:
custom = {
    visited = {...},
      -- same as above
    destination = ?,
      -- same as above todo
    overflow = <bool>,
      -- same as above
    ...
}

can_take:
custom = {
    visited = {...},
      -- same as above
    taker_name = <string>,
      -- the name of the player that owns the machine that wants to take. this can be nil. this is what should then be owner in item_properties in the insert and can_insert callbacks
    item_at_slot = <number>,
      -- return whether you can give the item at this slot instead of at any
      -- the lowest value should be 1
    cycle_through = <bool>,
      -- if this is true, set item_at_slot to the number of the next slot, so that the caller can read this
    meta_match = <bool>,
      -- this is an exactness requirement
      -- it is searched for an item which has not only the same name but also the same meta as wanted_item
    wear_match = <bool>,
      -- this is an exactness requirement
      -- caller searches for an item that also has the same wear as wanted_item
    ...
}

take:
custom = {
    visited = {...},
      -- same as above
    taker_name = <string>,
      -- same as above
    item_at_slot = <number>,
      -- give the item at this slot
    cycle_through = <bool>,
      -- same as above
    meta_match = <bool>,
      -- same as above
    wear_match = <bool>,
      -- same as above
    ...
}


item_properties thing
---------------------

todo
items can carry information
this is item-specific and should be carried further
this is optional
all entries are optional
there might be more entries added by some mods

item_properties = {
    owner = <playername>,
      -- the name of the player that owns this item. "owns" means here that the player or a machine of the player has sent the item. this may be nil
    speed = <vector>,
      -- the speed that the item has
}


Helpers
-------

There are also some helper functions that should make it easier to use this api:

item_transfer.give_side(pos, node, other_pos)

item_transfer.rotate_vector(pos, node, v)

item_transfer.turn_sides(pos, node, s)

item_transfer.get_callbacks(node_name)
returns item_transfer callbacks in table format or nil if the node is no item_transfer node

item_transfer.how_many_of_item(wanted_item, inv, listname, exact)

item_transfer.simple_can_connect(connected_sides)
returns a function; todo

item_transfer.do_nothing()
does nothing. you can use this as placeholder for the callback connect

item_transfer.simple_is_connected(_, _, _, others_in, others_out, _)
you can use this as placeholder for the callback is_connect

item_transfer.simple_can_take(listname[, is_prtotected_func])
returns a function
is_prtotected_func = function(pos, meta[, taker_name])
is_prtotected_func: returns false to not allow take

item_transfer.simple_take(listname[, is_prtotected_func])
returns a function
is_prtotected_func: same as above

item_transfer.after_place_node(connections, other_after_place)
returns a function

item_transfer.after_dig_node(connections, other_after_dig)
returns a function










-----------------------------------------------------------------
scenarios/examples:



scenario 1: A (a tube or some other transporting machine) wants to make a connection to B (anything)

A doer:
local can_in, can_out = B.can_connect(...)
-- lets say, im a pipeworks tube connecting with everything that wants to connect in any way
if not (can_in or can_out) then
	return
end
-- do own connection stuff here. ie. swap the node
B.connect(B_pos, true and can_in, true and can_out, side) -- todo, the list of parameters might be incomplete and out of order


B can_connect(...):
-- lets say, im a chest. always accept all connections
return true, true

B connect(pos, in, out, side): -- todo, the list of parameters might be incomplete and out of order
-- well, im a chest. ergo i dont do anything here


scenario 2: A wants to send an item towards B

A doer: (this is used by another function. if true is not returned, the item is sent somewhere else)
local b, a = B.can_insert(...)
if b then
	a = a or stacksize
	-- decrease the stack size to a if possible
	-- send the whole stack
else
	a = a or 0
	if a == 0 then return end -- the item is not accepted
	-- decrease the stack size to a or do a return
	-- send the stack (now with size a)
end
return true

B can_insert(...):
if (i am sure that i can take the whole stack) then
	return true -- = return true, stacksize = return true, nil
elseif (i have no space, all i could do is to drop the itemstack) then
	return false -- = return nil = return false, 0
elseif (i could take some but i dont want to take more, i had no choice but to drop the surplus) then
	return false, a -- an amount of a can be taken. its sure that if the stack size was a, "return true, nil" would happen
elseif (i can take some (and will send back the surplus), its ok if the whole stack is sent) then
	return true, a -- same a as before, a = stacksize - surplus_amount
else -- do the default thing: refuse everything
	return nil -- (same as 2nd case)
end


-------------------------------------------------------------------------






